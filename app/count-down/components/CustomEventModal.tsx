import React, { useState } from "react";
import { X, Loader, Save } from "lucide-react";
import { CustomButton } from "~/components/CustomButton";
import { motion, AnimatePresence } from "framer-motion";
import { db } from "firebase/firebase";
import { doc, setDoc, deleteDoc, serverTimestamp } from "firebase/firestore";
import { toast } from "react-hot-toast";
import { useModalScrollLock } from "~/utils/modal-utils";

export interface CustomEventType {
  id: string;
  name: string;
  date: Date;
  icon: string;
  userId: string;
  description?: string;
  createdAt: Date;
}

interface CustomEventModalProps {
  isOpen: boolean;
  onClose: () => void;
  userEmail: string;
  onSave: (event: CustomEventType) => void;
  event?: CustomEventType; // N·∫øu c√≥ s·ª± ki·ªán hi·ªán t·∫°i, ƒë√¢y l√† ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
}

const CustomEventModal: React.FC<CustomEventModalProps> = ({
  isOpen,
  onClose,
  userEmail,
  onSave,
  event,
}) => {
  const [name, setName] = useState(event?.name || "");
  const [date, setDate] = useState(
    event?.date
      ? new Date(event.date).toISOString().split("T")[0]
      : new Date().toISOString().split("T")[0]
  );
  const [time, setTime] = useState(
    event?.date ? new Date(event.date).toTimeString().slice(0, 5) : "00:00"
  );
  const [icon, setIcon] = useState(event?.icon || "üéâ");
  const [description, setDescription] = useState(event?.description || "");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  // Use the modal scroll lock hook instead of manual overflow handling
  useModalScrollLock(isOpen);

  // Danh s√°ch bi·ªÉu t∆∞·ª£ng ph·ªï bi·∫øn cho ng∆∞·ªùi d√πng ch·ªçn
  const popularIcons = [
    "üéâ",
    "üéä",
    "üéÇ",
    "üéÅ",
    "üíº",
    "üèÜ",
    "üíç",
    "üë∂",
    "üéì",
    "üè†",
    "üöó",
    "‚úàÔ∏è",
    "üí∞",
    "üíº",
    "üíª",
    "üì±",
    "üì∑",
    "üéÆ",
    "üé¨",
    "üé≠",
    "üé®",
    "üé§",
    "üéß",
    "üéº",
    "‚öΩ",
    "üèÄ",
    "üèà",
    "‚öæ",
    "üéæ",
    "üèê",
    "üèâ",
    "üéØ",
    "üé±",
    "üèì",
    "üè∏",
    "ü•ä",
    "ü•ã",
    "üèπ",
    "üé£",
    "üö¥",
    "üöµ",
    "üèä",
    "üßó",
    "üèÑ",
    "üèÇ",
    "ü™Ç",
    "üèá",
    "üèãÔ∏è",
    "ü§∏",
    "ü§∫",
    "‚õ∑Ô∏è",
    "üèåÔ∏è",
    "üßò",
    "üé™",
    "üåû",
    "üåõ",
    "‚≠ê",
    "üåà",
    "‚òÄÔ∏è",
    "‚òÅÔ∏è",
    "‚õÖ",
    "‚õàÔ∏è",
    "üå§Ô∏è",
    "üå¶Ô∏è",
    "üåßÔ∏è",
    "üå©Ô∏è",
    "üå®Ô∏è",
    "‚ùÑÔ∏è",
    "üíß",
    "üí¶",
    "‚òî",
    "üåä",
    "üçî",
    "üçï",
    "üçó",
    "üçñ",
    "üçú",
    "üçù",
    "üç£",
    "üç±",
    "üç©",
    "üç™",
    "üç∞",
    "üç´",
    "üç¨",
    "üç≠",
    "üç∑",
    "üç∏",
    "üçπ",
    "üç∫",
    "üçª",
    "ü•Ç",
    "ü•É",
    "‚òï",
    "üßã",
    "üçµ",
  ];

  const handleSave = async () => {
    // Ki·ªÉm tra d·ªØ li·ªáu
    if (name.trim() === "") {
      setError("Vui l√≤ng nh·∫≠p t√™n s·ª± ki·ªán");
      return;
    }

    setIsLoading(true);
    setError("");

    try {
      // T·∫°o ƒë·ªëi t∆∞·ª£ng s·ª± ki·ªán
      const eventDate = new Date(`${date}T${time}`);
      const eventId = event?.id || `event_${Date.now()}`;

      const customEvent: CustomEventType = {
        id: eventId,
        name: name.trim(),
        date: eventDate,
        icon,
        userId: userEmail,
        description: description.trim(),
        createdAt: event?.createdAt || new Date(),
      };

      // L∆∞u v√†o Firestore
      await setDoc(doc(db, "custom-events", eventId), {
        ...customEvent,
        date: eventDate.toISOString(),
        createdAt: event?.createdAt || serverTimestamp(),
      });

      toast.success(event ? "ƒê√£ c·∫≠p nh·∫≠t s·ª± ki·ªán" : "ƒê√£ t·∫°o s·ª± ki·ªán m·ªõi");
      onSave(customEvent);
      onClose();
    } catch (error) {
      console.error("L·ªói khi l∆∞u s·ª± ki·ªán:", error);
      setError("ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!event) return;

    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán n√†y?")) {
      return;
    }

    setIsLoading(true);

    try {
      await deleteDoc(doc(db, "custom-events", event.id));
      toast.success("ƒê√£ x√≥a s·ª± ki·ªán");
      onClose();
    } catch (error) {
      console.error("L·ªói khi x√≥a s·ª± ki·ªán:", error);
      toast.error("ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a s·ª± ki·ªán");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/30 backdrop-blur-sm overflow-y-auto">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="w-full max-w-md   rounded-xl shadow-lg overflow-hidden max-h-[90vh] my-4 flex flex-col"
          >
            {/* Fixed Header */}
            <div className="relative p-5 border-b border-gray-100">
              <button
                title="ƒê√≥ng"
                onClick={onClose}
                className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
              >
                <X size={18} />
              </button>

              <h2 className="text-xl font-bold text-gray-800 mb-1">
                {event ? "Ch·ªânh s·ª≠a s·ª± ki·ªán" : "T·∫°o s·ª± ki·ªán m·ªõi"}
              </h2>
              <p className="text-gray-600">
                {event
                  ? "C·∫≠p nh·∫≠t th√¥ng tin s·ª± ki·ªán c·ªßa b·∫°n"
                  : "T·∫°o s·ª± ki·ªán t√πy ch·ªânh ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c"}
              </p>
            </div>

            {/* Scrollable Content */}
            <div className="p-5 overflow-y-auto flex-1">
              {error && (
                <div className="mb-4 p-3 bg-red-50 text-red-600 rounded-md text-sm">
                  {error}
                </div>
              )}

              <div className="mb-4">
                <label
                  htmlFor="eventName"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  T√™n s·ª± ki·ªán <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="eventName"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nh·∫≠p t√™n s·ª± ki·ªán"
                  required
                />
              </div>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label
                    htmlFor="eventDate"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Ng√†y <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="date"
                    id="eventDate"
                    value={date}
                    onChange={(e) => setDate(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label
                    htmlFor="eventTime"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Gi·ªù <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="time"
                    id="eventTime"
                    value={time}
                    onChange={(e) => setTime(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
              </div>

              <div className="mb-4">
                <label
                  htmlFor="eventIcon"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Bi·ªÉu t∆∞·ª£ng <span className="text-red-500">*</span>
                </label>
                <div className="flex items-center mb-2">
                  <div className="w-10 h-10 flex items-center justify-center bg-gray-100 rounded-md text-2xl">
                    {icon}
                  </div>
                  <input
                    type="text"
                    id="eventIcon"
                    value={icon}
                    onChange={(e) => setIcon(e.target.value)}
                    maxLength={2}
                    className="ml-3 w-20 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div className="mt-2 bg-gray-50 p-2 rounded-md">
                  <p className="text-xs text-gray-600 mb-1">
                    Bi·ªÉu t∆∞·ª£ng ph·ªï bi·∫øn:
                  </p>
                  <div className="flex flex-wrap gap-2 max-h-[150px] overflow-y-auto pr-1">
                    {popularIcons.slice(0, 40).map((emoji) => (
                      <button
                        key={emoji}
                        type="button"
                        title={`Ch·ªçn ${emoji}`}
                        onClick={() => setIcon(emoji)}
                        className={`w-8 h-8 flex items-center justify-center rounded-md text-xl hover:bg-gray-200 ${
                          icon === emoji
                            ? "bg-blue-100 border border-blue-300"
                            : ""
                        }`}
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              <div className="mb-4">
                <label
                  htmlFor="eventDescription"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  M√¥ t·∫£ (t√πy ch·ªçn)
                </label>
                <textarea
                  id="eventDescription"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nh·∫≠p m√¥ t·∫£ cho s·ª± ki·ªán c·ªßa b·∫°n"
                  rows={3}
                />
              </div>
            </div>

            {/* Fixed Footer */}
            <div className="p-5 border-t border-gray-100">
              <div className="flex gap-3">
                {event && (
                  <CustomButton
                    variant="danger"
                    onClick={handleDelete}
                    disabled={isLoading}
                    className="flex-1"
                  >
                    X√≥a
                  </CustomButton>
                )}
                <CustomButton
                  variant="secondary"
                  onClick={onClose}
                  disabled={isLoading}
                  className="flex-1"
                >
                  H·ªßy
                </CustomButton>
                <CustomButton
                  variant={event ? "save" : "create"}
                  onClick={handleSave}
                  disabled={isLoading}
                  className="flex-1"
                  icon={
                    isLoading ? (
                      <Loader size={18} className="animate-spin" />
                    ) : (
                      <Save size={18} />
                    )
                  }
                >
                  {isLoading ? "ƒêang l∆∞u..." : event ? "C·∫≠p nh·∫≠t" : "T·∫°o"}
                </CustomButton>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default CustomEventModal;
